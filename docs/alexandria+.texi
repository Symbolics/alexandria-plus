\input texinfo

@c alexandria+.texi --- Reference manual

@c Copyright (C) 2021 Steven Nunez

@c This file is part of Alexandria+.



@c Commentary:

@c Generated automatically by Declt version 2.4 patchlevel 1 "Will Decker"
@c on Thu Sep 02 13:15:33 2021 GMT+8.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename alexandria+.info
@settitle The Alexandria+ Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The Alexandria+ Reference Manual, version 0.1.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@cindex @t{\name\}
@cindex Module, @t{\name\}
@end macro

@c Other files
@macro otherfileindex{name}
@cindex @t{\name\}
@cindex Other File, @t{\name\}
@cindex File, other, @t{\name\}
@end macro

@c Lisp files
@macro lispfileindex{name}
@cindex @t{\name\}
@cindex Lisp File, @t{\name\}
@cindex File, Lisp, @t{\name\}
@end macro

@c C files
@macro cfileindex{name}
@cindex @t{\name\}
@cindex C File, @t{\name\}
@cindex File, C, @t{\name\}
@end macro

@c Java files
@macro javafileindex{name}
@cindex @t{\name\}
@cindex Java File, @t{\name\}
@cindex File, Java, @t{\name\}
@end macro

@c Static files
@macro staticfileindex{name}
@cindex @t{\name\}
@cindex Static File, @t{\name\}
@cindex File, static, @t{\name\}
@end macro

@c Doc files
@macro docfileindex{name}
@cindex @t{\name\}
@cindex Doc File, @t{\name\}
@cindex File, doc, @t{\name\}
@end macro

@c HTML files
@macro htmlfileindex{name}
@cindex @t{\name\}
@cindex HTML File, @t{\name\}
@cindex File, html, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro setfexpandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro shortcombinationsubindex{name}
@tpindex @r{Short Method Combination, }\name\
@tpindex @r{Method Combination, Short, }\name\
@end macro

@macro longcombinationsubindex{name}
@tpindex @r{Long Method Combination, }\name\
@tpindex @r{Method Combination, Long, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Alexandria+ Reference: (alexandria+). The Alexandria+ Reference Manual.
@end direntry



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Alexandria+ Reference Manual
@subtitle A slightly less conservative version of Alexandria, version 0.1

@author Steven Nunez <@email{steve@atchar{}symbolics.tech}>

@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Systems, (dir), (dir)
@top The Alexandria+ Reference Manual
This is the Alexandria+ Reference Manual, version 0.1.

@menu
* Systems:: The systems documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu
@end ifnottex



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Files, Top, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The alexandria+ system::
@end menu


@c ----------------------
@c The alexandria+ system
@c ----------------------
@node The alexandria+ system, , Systems, Systems
@section @t{alexandria+}
@anchor{go to the alexandria+ system}@c
@systemindex{alexandria+}@c
@table @strong
@item Author
Steven Nunez <@email{steve@atchar{}symbolics.tech}>
@item Home Page
@uref{https://github.com/symbolics/alexandria+}
@item License
MS-PL
@item Description
A slightly less conservative version of Alexandria
@item Long Description
Utilities not in Alexandria.  This library only adds functions that are not in UIOP@comma{} OSICAT or Alexandria.
@item Version
0.1
@item Dependency
@t{alexandria}
@item Source
@ref{go to the alexandria+․asd file, , @t{alexandria+.asd}} (file)
@item Directory
@url{file://s:/src/alexandria+/, ignore, @t{s:/src/alexandria+/}}
@item Components
@itemize @bullet
@item
@ref{go to the alexandria+/pkgdcl․lisp file, , @t{pkgdcl.lisp}} (file)
@item
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Systems, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The alexandria+.asd file: The alexandria+․asd file.
* The alexandria+/pkgdcl.lisp file: The alexandria+/pkgdcl․lisp file.
* The alexandria+/lists.lisp file: The alexandria+/lists․lisp file.
@end menu

@node The alexandria+․asd file, The alexandria+/pkgdcl․lisp file, Lisp files, Lisp files
@subsection @t{alexandria+.asd}
@anchor{go to the alexandria+․asd file}@c
@lispfileindex{alexandria+.asd}@c
@table @strong
@item Location
@url{file://s:/src/alexandria+/alexandria+.asd, ignore, @t{alexandria+.asd}}
@item Systems
@ref{go to the alexandria+ system, , @t{alexandria+}} (system)
@end table

@node The alexandria+/pkgdcl․lisp file, The alexandria+/lists․lisp file, The alexandria+․asd file, Lisp files
@subsection @t{alexandria+/pkgdcl.lisp}
@anchor{go to the alexandria+/pkgdcl․lisp file}@c
@lispfileindex{alexandria+/pkgdcl.lisp}@c
@table @strong
@item Parent
@ref{go to the alexandria+ system, , @t{alexandria+}} (system)
@item Location
@url{file://s:/src/alexandria+/pkgdcl.lisp, ignore, @t{pkgdcl.lisp}}
@item Packages
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@end table

@node The alexandria+/lists․lisp file, , The alexandria+/pkgdcl․lisp file, Lisp files
@subsection @t{alexandria+/lists.lisp}
@anchor{go to the alexandria+/lists․lisp file}@c
@lispfileindex{alexandria+/lists.lisp}@c
@table @strong
@item Parent
@ref{go to the alexandria+ system, , @t{alexandria+}} (system)
@item Location
@url{file://s:/src/alexandria+/lists.lisp, ignore, @t{lists.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the ALEXANDRIA+∶∶ALIST-KEYS function, , @t{alist-keys}} (function)
@item
@ref{go to the ALEXANDRIA+∶∶ALIST-VALUES function, , @t{alist-values}} (function)
@item
@ref{go to the ALEXANDRIA+∶∶ALISTP function, , @t{alistp}} (function)
@item
@ref{go to the ALEXANDRIA+∶∶CDR-ASSOC function, , @t{cdr-assoc}} (function)
@item
@ref{go to the ALEXANDRIA+∶∶PLISTP function, , @t{plistp}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the ALEXANDRIA+∶∶*ASSOC-TEST* special variable, , @t{*assoc-test*}} (special variable)
@item
@ref{go to the ALEXANDRIA+∶∶ALIST type, , @t{alist}} (type)
@item
@ref{go to the ALEXANDRIA+∶∶PLIST type, , @t{plist}} (type)
@end itemize
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The alexandria+ package::
@end menu


@c -----------------------
@c The alexandria+ package
@c -----------------------
@node The alexandria+ package, , Packages, Packages
@section @t{alexandria+}
@anchor{go to the ALEXANDRIA+ package}@c
@packageindex{alexandria+}@c
@table @strong
@item Source
@ref{go to the alexandria+/pkgdcl․lisp file, , @t{pkgdcl.lisp}} (file)
@item Use List
@itemize @bullet
@item
@t{alexandria}
@item
@t{common-lisp}
@end itemize
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the ALEXANDRIA+∶∶ALIST-KEYS function, , @t{alist-keys}} (function)
@item
@ref{go to the ALEXANDRIA+∶∶ALIST-VALUES function, , @t{alist-values}} (function)
@item
@ref{go to the ALEXANDRIA+∶∶ALISTP function, , @t{alistp}} (function)
@item
@ref{go to the ALEXANDRIA+∶∶CDR-ASSOC function, , @t{cdr-assoc}} (function)
@item
@ref{go to the ALEXANDRIA+∶∶PLISTP function, , @t{plistp}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the ALEXANDRIA+∶∶*ASSOC-TEST* special variable, , @t{*assoc-test*}} (special variable)
@item
@ref{go to the ALEXANDRIA+∶∶ALIST type, , @t{alist}} (type)
@item
@ref{go to the ALEXANDRIA+∶∶PLIST type, , @t{plist}} (type)
@end itemize
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Exported definitions::
* Internal definitions::
@end menu


@c --------------------
@c Exported definitions
@c --------------------
@node Exported definitions, Internal definitions, Definitions, Definitions
@section Exported definitions
@menu
* Exported functions::
@end menu

@node Exported functions, , Exported definitions, Exported definitions
@subsection Functions
@deffn {Function} {alist-keys} ALIST
@anchor{go to the ALEXANDRIA+∶∶ALIST-KEYS function}@c
@functionsubindex{alist-keys}@c
Returns a list of the keys in ALIST.
@table @strong
@item Package
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@item Source
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end table
@end deffn
@deffn {Function} {alist-values} ALIST
@anchor{go to the ALEXANDRIA+∶∶ALIST-VALUES function}@c
@functionsubindex{alist-values}@c
Returns a list of the values in ALIST.
@table @strong
@item Package
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@item Source
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end table
@end deffn
@deffn {Function} {alistp} VALUE
@anchor{go to the ALEXANDRIA+∶∶ALISTP function}@c
@functionsubindex{alistp}@c
Returns T if VALUE is an ALIST.
@table @strong
@item Package
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@item Source
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end table
@end deffn
@deffn {Function} {cdr-assoc} ITEM ALIST
@anchor{go to the ALEXANDRIA+∶∶CDR-ASSOC function}@c
@functionsubindex{cdr-assoc}@c
Return the value associated with ITEM in ALIST.
@table @strong
@item Package
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@item Source
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end table
@end deffn
@deffn {Function} {plistp} VALUE
@anchor{go to the ALEXANDRIA+∶∶PLISTP function}@c
@functionsubindex{plistp}@c
Returns VALUE if it is a properly formed PLIST@comma{} NIL otherwise.
@table @strong
@item Package
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@item Source
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end table
@end deffn


@c --------------------
@c Internal definitions
@c --------------------
@node Internal definitions, , Exported definitions, Definitions
@section Internal definitions
@menu
* Internal special variables::
* Internal types::
@end menu

@node Internal special variables, Internal types, Internal definitions, Internal definitions
@subsection Special variables
@defvr {Special Variable} *assoc-test*
@anchor{go to the ALEXANDRIA+∶∶*ASSOC-TEST* special variable}@c
@specialsubindex{*assoc-test*}@c
Global equality test for assoc
@table @strong
@item Package
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@item Source
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end table
@end defvr

@node Internal types, , Internal special variables, Internal definitions
@subsection Types
@deftp {Type} {alist} ()
@anchor{go to the ALEXANDRIA+∶∶ALIST type}@c
@typesubindex{alist}@c
Type designator for ALIST. Implemented as a SATISFIES type@comma{} hence not recommended for performance intensive use. Main usefullness as a type designator of the expected type in a TYPE-ERROR.
@table @strong
@item Package
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@item Source
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end table
@end deftp
@deftp {Type} {plist} ()
@anchor{go to the ALEXANDRIA+∶∶PLIST type}@c
@typesubindex{plist}@c
Type designator for PLIST. Implemented as a SATISFIES type@comma{} hence not recommended for performance intensive use. Main usefullness as a type designator of the expected type in a TYPE-ERROR.
@table @strong
@item Package
@ref{go to the ALEXANDRIA+ package, , @t{alexandria+}}
@item Source
@ref{go to the alexandria+/lists․lisp file, , @t{lists.lisp}} (file)
@end table
@end deftp



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c alexandria+.texi ends here
